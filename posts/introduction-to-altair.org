#+BEGIN_COMMENT
.. title: Introduction To Altair
.. slug: introduction-to-altair
.. date: 2024-01-29 19:52:49 UTC-08:00
.. tags: altair,bowling,visualization
.. category: Visualization
.. link: 
.. description: An introduction to Vega-Altair.
.. type: text

#+END_COMMENT
#+OPTIONS: ^:{}
#+TOC: headlines 3
#+PROPERTY: header-args :session ~/.local/share/jupyter/runtime/kernel-6a3f8aa8-27ba-49fa-bf84-cdb1c18e2a3a-ssh.json

#+BEGIN_SRC python :results none :exports none
%load_ext autoreload
%autoreload 2
#+END_SRC

* Setup

#+begin_src python :results none
# python
from functools import partial
from pathlib import Path
import os

# pypi
from dotenv import load_dotenv
from expects import be_true, expect
from tabulate import tabulate

import altair
import pandas

# monkey
from graeae.visualization.altair_helpers import output_path, save_chart
#+end_src

#+begin_src python :results none
SLUG = "introduction-to-altair"
OUTPUT_PATH = output_path(SLUG)

HEIGHT, WIDTH = 600, 800
SAVE_IT = partial(save_chart, output_path=OUTPUT_PATH, height=HEIGHT + 100)
#+end_src

#+begin_src python :results none
TABLE = partial(partial(tabulate,
                        headers="keys",
                        tablefmt="orgtbl",
                        showindex=False))
#+end_src

* The Data

#+begin_src python :results output :exports both
load_dotenv(override=True)
table_path = Path(os.getenv("WORLD_HAPPINESS_TABLE"))

expect(table_path.is_file()).to(be_true)

table = pandas.read_csv(table_path)
print(table.shape)
#+end_src

#+RESULTS:
: (2199, 11)


#+begin_src python :results none
def column_printer(table, headers=("Column", "Type")):
    print(TABLE(
        ((column, str(table[column].dtype))
         for column in table.columns),
        headers=headers))
    return
#+end_src

#+begin_src python :results output :exports both
column_printer(table)
#+end_src

| Column                           | Type    |
|----------------------------------+---------|
| Country name                     | object  |
| year                             | int64   |
| Life Ladder                      | float64 |
| Log GDP per capita               | float64 |
| Social support                   | float64 |
| Healthy life expectancy at birth | float64 |
| Freedom to make life choices     | float64 |
| Generosity                       | float64 |
| Perceptions of corruption        | float64 |
| Positive affect                  | float64 |
| Negative affect                  | float64 |

#+begin_src python :results none
class Column:
    __slots__ = ()
    country = "Country name"
    year = "year"
    happiness = "Life Ladder"
    gdp = "Log GDP per capita"
    generosity = "Generosity"
#+end_src

** Creating a Chart

#+begin_src python :results output :exports both
chart = altair.Chart(table)
print(type(chart))
#+end_src

#+RESULTS:
: <class 'altair.vegalite.v5.api.Chart'>

The ~Chart~ class is defined in ~altair.vegalite.v5.api~. This is its docstring description:

#+begin_quote
Create a basic Altair/Vega-Lite chart.


Although it is possible to set all Chart properties as constructor attributes,
it is more idiomatic to use methods such as ~mark_point()~, ~encode()~,
~transform_filter()~, ~properties()~, etc. See Altair's documentation
for details and examples: http://altair-viz.github.io/.
#+end_quote

The attributes set by the ~Chart~ class' constructor (as opposed to being passed to its parent classes) are:

 - data
 - encoding
 - mark
 - width
 - height

By default they're set to ~Undefined~ which is an altair-defined object (see ~altair.utils.schemapi~), and as noted, you don't normally set the attributes using the constructor (other than ~data~ which isn't mentioned in the docstring but appears to be passed to the ~Chart~ constructor by convention).

#+begin_src plantuml :file ../files/posts/introduction-to-altair/chart.png :exports none
!theme mars

class Chart {
 + data: DataFrameLike
 + encoding: core.FacetedEncoding
 + mark: str
 + width: int
 + height: int

 + from_dict():  core.SchemaBase
 + to_dict(): dict
 + transformed_data(): DataFrameLike
 + add_params(): Chart
 + interactive(): Chart
}

TopLevelMixin <|- Chart
_EncodingMixin <|- Chart
mixin.MarkMethodMixin <|- Chart
core.TopLevelUnitSpec <|- Chart
#+end_src

#+RESULTS:
[[file:../files/posts/introduction-to-altair/chart.png]]

[[img-url:chart.png][Chart Class]]

The methods take arguments, but I believe ~interactive~ (which I haven't seen called with arguments) is the only method that I'll be using - all the other methods you use belong to parent classes.

*** TopLevelUnitSpec

#+begin_src plantuml :file ../files/posts/introduction-to-altair/top-level-unit-spec.png :exports none
!theme mars

SchemaBase <|- VegaLiteSchema
VegaLiteSchema <|- TopLevelSpec
TopLevelSpec <|-TopLevelUnitSpec
#+end_src

#+RESULTS:
[[file:../files/posts/introduction-to-altair/top-level-unit-spec.png]]

[[img-url:top-level-unit-spec.png]]

Only the top-most parent (~SchemaBase~) has a method of intererst here.

*** SchemaBase

#+begin_src plantuml :file ../files/posts/introduction-to-altair/schema-base.png :exports none
!theme mars

class SchemaBase {

+ copy(): Self
}
#+end_src

#+RESULTS:
[[file:../files/posts/introduction-to-altair/schema-base.png]]

[[img-url:schema-base.png]]

There are many more methods in ~altair.utils.schemapi.SchemaBase~ but I'm highlighting ~copy~ here because it gets used quite a bit by the other classes but is defined in this somewhat obscure place. The behavior is what you'd expect so I don't see a need to go over it, but it's one of those mystery methods that just pops up when you use deep inheritance like this that makes you wonder what's going on so I'll document it here, for now.

**note:** The details of the code probably shouldn't go into the introduction-introduction. Maybe put this stuff further down or in another post.

*** _EncodingMixin

#+begin_src plantuml :file ../files/posts/introduction-to-altair/encoding-mixin.png :exports none
!theme mars

class _EncodingMixin {
  encode(*args, **kwargs): Self
}
#+end_src

#+RESULTS:
[[file:../files/posts/introduction-to-altair/encoding-mixin.png]]

[[img-url:encoding-mixin.png]]

The ~encoding~ method takes in whatever combination of positional and keyword arguments you pass into it and uses them along with the values that are already set in the Chart's ~encoding~ attribute to update the ~encoding~ before returning the chart (a copy so the original chart isn't changed).

The ~encoding~ attribute is an instance of the ~altair.vegalite.v5.schema.FacetedEncoding~ class.

** Making It a Bar Chart

#+begin_src python :results output :exports both
bar_chart = chart.mark_bar()
print(type(bar_chart))
#+end_src

#+RESULTS:
: <class 'altair.vegalite.v5.api.Chart'>


#+begin_src plantuml :file ../files/posts/introduction-to-altair/mark-mixin.png :exports none
!theme mars

class MarkMethodMixin {

mark_arc(): Self
mark_area(): Self
mark_bar(): Self
mark_boxplot(): Self
mark_circle(): Self
mark_errorband(): Self
mark_errorbar(): Self
mark_geoshape(): Self
mark_image(): Self
mark_line(): Self
mark_point(): Self
mark_rect(): Self
mark_rule(): Self
mark_square(): Self
mark_text(): Self
mark_tick(): Self
mark_trail(): Self
}
#+end_src

#+RESULTS:
[[file:../files/posts/introduction-to-altair/mark-mixin.png]]

[[img-url:mark-mixin.png][MarkMixin Class]]

Looking in the ~mark_bar~ method, there's a lot of arguments you could pass to it, but fundamentally all it's really doing is setting the ~mark~ attribute to ~bar~.

#+begin_src python :results output :exports both
print("Chart Mark: '{}'".format(chart.mark))
print("Bar Chart Mark: '{}'".format(bar_chart.mark))
#+end_src

#+RESULTS:
: Chart Mark: 'Undefined'
: Bart Chart Mark: 'bar'

** Year

#+begin_src python :results output :exports both
year_counts = table.year.value_counts().reset_index().sort_values("year").T
year_counts.columns = year_counts.iloc[0]
year_counts = year_counts.drop(year_counts.index[0])
print(TABLE(year_counts, showindex=True))
#+end_src


|       |   2005 |   2006 |   2007 |   2008 |   2009 |   2010 |   2011 |   2012 |   2013 |   2014 |   2015 |   2016 |   2017 |   2018 |   2019 |   2020 |   2021 |   2022 |
|-------+--------+--------+--------+--------+--------+--------+--------+--------+--------+--------+--------+--------+--------+--------+--------+--------+--------+--------|
| count |     27 |     89 |    102 |    110 |    114 |    124 |    146 |    141 |    136 |    144 |    142 |    141 |    147 |    141 |    143 |    116 |    122 |    114 |

Now as a bar-chart.

#+begin_src python :results output :exports both
year_chart = bar_chart.encode(
    x="year:N",
    y="count()")

year_chart = year_chart.properties(height=HEIGHT, width=WIDTH)

SAVE_IT(year_chart, "year-counts-bar-chart")
#+end_src

#+RESULTS:
#+begin_export html
<object type="text/html" data="year-counts-bar-chart.html" style="width:100%" height=700>
  <p>Figure Missing</p>
</object>
#+end_export


#+begin_src plantuml :file ../files/posts/introduction-to-altair/top-level-mixin.png :exports none
!theme mars

mixins.ConfigMethodMixin <|- MarkMethodMixin

class MarkMethodMixin {

+ properties(**kwargs): Self
}
#+end_src

#+RESULTS:
[[file:../files/posts/introduction-to-altair/top-level-mixin.png]]

[[img-url:top-level-mixin.png]]

This method makes a copy of the class, validates the arguments and then sets the properties on itself. The arguments are based on the JSON Schema passed to vega-lite.

** Life Ladder
*** By Year

#+begin_src python :results output :exports both
boxplot = chart.mark_boxplot(extent="min-max").encode(
    x="{}:O".format(Column.year),
    y=Column.happiness
).properties(height=HEIGHT, width=WIDTH)

SAVE_IT(boxplot, "happiness-year-boxplots")
#+end_src

#+RESULTS:
#+begin_export html
<object type="text/html" data="happiness-year-boxplots.html" style="width:100%" height=700>
  <p>Figure Missing</p>
</object>
#+end_export

*** The Most Recent Year (2022)
#+begin_src python :results output :exports both
print(table.year.dtype)
#+end_src

#+RESULTS:
: int64

#+begin_src python :results output :exports both
data_2022 = table[table.year==2022]
chart_2022 = altair.Chart(data_2022).properties(
    height=HEIGHT, width=WIDTH)

bar_chart_2022 = chart_2022.mark_bar()

ladder_chart = bar_chart_2022.encode(
    x=altair.X(Column.happiness, bin=True),
    y="count()"
)

SAVE_IT(ladder_chart, "ladder-histogram")
#+end_src

#+RESULTS:
#+begin_export html
<object type="text/html" data="ladder-histogram.html" style="width:100%" height=700>
  <p>Figure Missing</p>
</object>
#+end_export

** GDP

#+begin_src python :results output :exports both
scatter = chart_2022.mark_circle()
print(scatter.mark)
#+end_src

#+RESULTS:
: circle

#+begin_src python :results output :exports both
gdp_scatter = scatter.encode(
    x=Column.gdp,
    y=Column.happiness
)

SAVE_IT(gdp_scatter, "gdp-vs-happiness")
#+end_src

#+RESULTS:
#+begin_export html
<object type="text/html" data="gdp-vs-happiness.html" style="width:100%" height=700>
  <p>Figure Missing</p>
</object>
#+end_export

** With Generosity

#+begin_src python :results output :exports both
gdp_generosity = scatter.encode(
    x=Column.happiness,
    y=Column.generosity,
    color=Column.gdp,
    tooltip=[Column.country, Column.happiness, Column.gdp,
             Column.generosity]
)

SAVE_IT(gdp_generosity, "gdp-and-generosity")
#+end_src

#+RESULTS:
#+begin_export html
<object type="text/html" data="gdp-and-generosity.html" style="width:100%" height=700>
  <p>Figure Missing</p>
</object>
#+end_export

* Links
** Tutorial Sources
- [[https://www.coursera.org/learn/fundamentals-of-data-visualization/home/week/1][/Fundamentals of Visualization with Dr. Danielle Albers Szafir/]]: Coursera course where the original tutorial came from.
- [[https://infovis.fh-potsdam.de/tutorials/][InfoVis Course from Marian Dork]]: Iniversity of Applied Sciences Potsdam that the Coursera course cites as the source for their tutorial.
** The Data
- World Happiness Report Dataset [Internet]. [cited 2023 Dec 11]. Available from: https://www.kaggle.com/datasets/unsdsn/world-happiness
- Inc G. Gallup.com. 2009 [cited 2023 Dec 11]. Understanding How Gallup Uses the Cantril Scale. Available from: https://news.gallup.com/poll/122453/Understanding-Gallup-Uses-Cantril-Scale.aspx
- World Happiness Report [Internet]. 2023 [cited 2023 Dec 11]. Available from: https://worldhappiness.report/

** Altair
- Layered and Multi-View Charts — Vega-Altair 5.2.0 documentation [Internet]. [cited 2023 Dec 12]. Available from: https://altair-viz.github.io/user_guide/compound_charts.html

