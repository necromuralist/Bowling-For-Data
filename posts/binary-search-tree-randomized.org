#+BEGIN_COMMENT
.. title: Binary Search Tree: Randomized
.. slug: binary-search-tree-randomized
.. date: 2022-03-16 17:59:09 UTC-07:00
.. tags: data structures,binary search trees,algorithms
.. category: Data Structures
.. link: 
.. description: A look at randomly created binary search trees.
.. type: text
#+END_COMMENT
#+OPTIONS: ^:{}
#+TOC: headlines 3
#+PROPERTY: header-args :session ~/.local/share/jupyter/runtime/kernel-56d3ad01-229c-4402-95bb-50e068495726-ssh.json
#+BEGIN_SRC python :results none :exports none
%load_ext autoreload
%autoreload 2
#+END_SRC
This is the next post in a series on Binary Search Trees that start with {{% lancelot "this post" %}}binary-search-trees{{% /lancelot %}}. In this post we'll be looking at tree-heights when you randomize the order that the nodes are inserted into the tree.
* Introduction
We now have a basic Binary Search Tree and some methods to build and query it. I didn't really go over it but if you look at the basic {{% lancelot "querying methods" %}}binary-search-tree-queries{{% /lancelot %}} (search, min, max, etc.) you can see that they boil down to starting at a node (often the root) and then traversing up or down the levels of the tree until we find what we want or we reach a leaf. This means that at most the number of comparisons you make (everytime you reach a node you compare the node's key to your key to pick a child to follow) will be the height of tree (*h*).

The height of the tree depends, however, on the order in which you insert and delete the nodes. If you insert them in ascending order, for instance, you end up with all the nodes being right children and a height of *n - 1* (the number of edges). But, {{% lancelot "CLRS"%}}clrs{{% /lancelot %}} shows that if you randomize the insertion you will, on average have a height of \(O(\lg(n))\) so I'm going to take an experimental look at that here.

** Imports and Setup
#+begin_src python :results none
# python
from pathlib import Path

# pypi
import networkx

# this project
from bowling.data_structures.binary_search_tree import Tree
#+end_src

#+begin_src python :results none
SLUG = "binary-search-tree-randomized"
GRAPH_OUTPUT = Path(f"files/posts/{SLUG}/")
if not GRAPH_OUTPUT.is_dir():
    GRAPH_OUTPUT.mkdir()
#+end_src
* Sources
- {{% doc %}}clrs{{% /doc %}}
