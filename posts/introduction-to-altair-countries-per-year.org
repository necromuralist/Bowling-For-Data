#+BEGIN_COMMENT
.. title: Introduction To Altair: Countries Per Year
.. slug: introduction-to-altair-countries-per-year
.. date: 2024-03-06 16:57:41 UTC-08:00
.. tags: altair,bowling,visualization
.. category: Visualization
.. link: 
.. description: Continuing the Altair Introduction with a plot of the countries per year.
.. type: text

#+END_COMMENT
#+OPTIONS: ^:{}
#+TOC: headlines 3
#+PROPERTY: header-args :session ~/.local/share/jupyter/runtime/kernel-76c5ec68-5d1a-42ef-884d-8579ffd0de57-ssh.json

#+BEGIN_SRC python :results none :exports none
%load_ext autoreload
%autoreload 2
#+END_SRC

* Setup
** Imports

These initial imports are supports to make creating this post easier and aren't necessarily needed for the altair plots.

#+begin_src python :results none
# python
from functools import partial
from pathlib import Path
from pprint import pprint

import os

# pypi
from dotenv import load_dotenv
from expects import be_true, equal, expect
from tabulate import tabulate

# monkey
from graeae.visualization.altair_helpers import output_path, save_chart
#+end_src

These are the ones that are really needed for the plotting. I installed both of them through pypi.

#+begin_src python :results none
import altair
import pandas
#+end_src

** Some Setting Up

These are some convenience objects to save a little bit of coding when saving the chart.

#+begin_src python :results none
SLUG = "introduction-to-altair-countries-per-year"
OUTPUT_PATH = output_path(SLUG)

HEIGHT, WIDTH = 600, 800
SAVE_IT = partial(save_chart, output_path=OUTPUT_PATH, height=HEIGHT + 100)
#+end_src

This is to make printing out a pandas dataframe as a table a little nicer.

#+begin_src python :results none
TABLE = partial(partial(tabulate,
                        headers="keys",
                        tablefmt="orgtbl",
                        showindex=False))
#+end_src

* The Data

#+begin_src python :results output :exports both
load_dotenv(override=True)
table_path = Path(os.getenv("WORLD_HAPPINESS_TABLE"))

expect(table_path.is_file()).to(be_true)

table = pandas.read_csv(table_path)
print(table.shape)
#+end_src

#+RESULTS:
: (2199, 11)

** The Data Columns

#+begin_src python :results none
def column_printer(table, headers=("Column", "Type")):
    print(TABLE(
        ((column, str(table[column].dtype))
         for column in table.columns),
        headers=headers))
    return
#+end_src

#+begin_src python :results output :exports both
column_printer(table)
#+end_src

| Column                           | Type    |
|----------------------------------+---------|
| Country name                     | object  |
| year                             | int64   |
| Life Ladder                      | float64 |
| Log GDP per capita               | float64 |
| Social support                   | float64 |
| Healthy life expectancy at birth | float64 |
| Freedom to make life choices     | float64 |
| Generosity                       | float64 |
| Perceptions of corruption        | float64 |
| Positive affect                  | float64 |
| Negative affect                  | float64 |

For this initial post I'll only use the year, but 

#+begin_src python :results none
class Column:
    country = "Country name"
    year = "year"
    happiness = "Life Ladder"
    gdp = "Log GDP per capita"
    generosity = "Generosity"
#+end_src

* Year
** Using Pandas' ~value_counts~ Method

#+begin_src python :results none
year_counts = table.year.value_counts().reset_index().sort_values("year")
#+end_src

#+begin_src python :results output :exports both
table_counts = year_counts.T
table_counts.columns = table_counts.iloc[0]
table_counts = table_counts.drop(table_counts.index[0])
print(TABLE(table_counts, showindex=True))
#+end_src

|       |   2005 |   2006 |   2007 |   2008 |   2009 |   2010 |   2011 |   2012 |   2013 |   2014 |   2015 |   2016 |   2017 |   2018 |   2019 |   2020 |   2021 |   2022 |
|-------+--------+--------+--------+--------+--------+--------+--------+--------+--------+--------+--------+--------+--------+--------+--------+--------+--------+--------|
| count |     27 |     89 |    102 |    110 |    114 |    124 |    146 |    141 |    136 |    144 |    142 |    141 |    147 |    141 |    143 |    116 |    122 |    114 |


Now as a bar-chart.

#+begin_src python :results output :exports both
value_counts_chart = altair.Chart(year_counts).mark_bar().encode(
    x="{}:N".format(Column.year),
    y="count").properties(height=HEIGHT, width=WIDTH)

VALUE_COUNTS_HTML = "value-counts-bar-chart"
SAVE_IT(value_counts_chart, VALUE_COUNTS_HTML)
#+end_src

#+RESULTS:
#+begin_export html
<object type="text/html" data="value-counts-bar-chart.html" style="width:100%" height=700>
  <p>Figure Missing</p>
</object>
#+end_export

** Using Altair's "count"

#+begin_src python :results output :exports both
altair_counts_chart = altair.Chart(table).mark_bar().encode(
    x="{}:N".format(Column.year),
    y="count()").properties(height=HEIGHT, width=WIDTH)

ALTAIR_COUNTS_HTML = "altair-counts-bar-chart"
SAVE_IT(altair_counts_chart, ALTAIR_COUNTS_HTML)
#+end_src

#+RESULTS:
#+begin_export html
<object type="text/html" data="altair-counts-bar-chart.html" style="width:100%" height=700>
  <p>Figure Missing</p>
</object>
#+end_export

** Comparing the File Sizes

#+begin_src python :results output :exports both
HTML_FILE = ".html"
altair_counts_html = OUTPUT_PATH/(ALTAIR_COUNTS_HTML + HTML_FILE)
pandas_counts_html = OUTPUT_PATH/(VALUE_COUNTS_HTML + HTML_FILE)
print("Altair counts(): {:,} bytes".format(altair_counts_html.stat().st_size))
print("Pandas value_counts: {:,} bytes".format(pandas_counts_html.stat().st_size))
#+end_src

#+RESULTS:
: Altair counts(): 685,111 bytes
: Pandas value_counts: 2,067 bytes

Here's one of the problems with ~altair~ - it passes along the entire dataset and then tells ~vega~ to work with it in the browser. So, in this case it's passing all our happiness data, even though the chart doesn't use any of the columns.

I'll convert the chart back to a dictionary to show what I'm saying.

#+begin_src python :results none
chart_dictionary = altair_counts_chart.to_dict()
#+end_src

It stores the data that was in the original data-frame in a list of dictionaries under the key called "datasets" - each dictionary represents one row in the original data-frame.

#+begin_src python :results output :exports both
chart_data = chart_dictionary["datasets"][chart_dictionary["data"]["name"]]
expect(len(chart_data)).to(equal(len(table)))

print("chart_data: {:,} original data: {:,}".format(len(chart_data), len(table)))
#+end_src

#+RESULTS:
: chart_data: 2,199 original data: 2,199

Here's the first entry in the chart data.

#+begin_src python :results output :exports both
pprint(data[0])
#+end_src

#+RESULTS:
#+begin_example
{'Country name': 'Afghanistan',
 'Freedom to make life choices': 0.718,
 'Generosity': 0.168,
 'Healthy life expectancy at birth': 50.5,
 'Life Ladder': 3.724,
 'Log GDP per capita': 7.35,
 'Negative affect': 0.258,
 'Perceptions of corruption': 0.882,
 'Positive affect': 0.414,
 'Social support': 0.451,
 'year': 2008}
#+end_example

And here's the first row of the original data-frame.

#+begin_src python :results output :exports both
print(table.iloc[0])
#+end_src

#+RESULTS:
#+begin_example
Country name                        Afghanistan
year                                       2008
Life Ladder                               3.724
Log GDP per capita                         7.35
Social support                            0.451
Healthy life expectancy at birth           50.5
Freedom to make life choices              0.718
Generosity                                0.168
Perceptions of corruption                 0.882
Positive affect                           0.414
Negative affect                           0.258
Name: 0, dtype: object
#+end_example

By contrast, here's what's in the chart created from the pandas ~value_counts~ object.

#+begin_src python :results output :exports both
pandas_dictionary = value_counts_chart.to_dict()
pandas_data = pandas_dictionary["datasets"][pandas_dictionary["data"]["name"]]
print("Entries in value_counts chart data: {}".format(len(pandas_data)))
print("\nFirst Row:")
print(pandas_data[0])
#+end_src

#+RESULTS:
: Entries in value_counts chart data: 18
: 
: First Row:
: {'year': 2005, 'count': 27}

There's a project called [[https://vegafusion.io/][vegafusion]] that is supposed to help with reducing the size but it requires that you use a jupyter notebook for interactivity (it uses python to make a jupyter widget or some such) so it won't work for a static site like this one. So when using altair we have to think about what we're doing if the size of the files is going to be a problem. In most cases it probably makes sense to do the transformations in pandas first and then only pass the data to plot to altair.

See the [[https://altair-viz.github.io/user_guide/large_datasets.html][altair documentation on Large Datasets]] for more information.
* Links
** The Posts In This Series

- {{% lancelot "Starting Post" %}}introduction-to-altair{{% /lancelot %}}

** Tutorial Sources
- [[https://www.coursera.org/learn/fundamentals-of-data-visualization/home/week/1][/Fundamentals of Visualization with Dr. Danielle Albers Szafir/]]: Coursera course where the original tutorial came from.
- [[https://infovis.fh-potsdam.de/tutorials/][InfoVis Course from Marian Dork]]: Iniversity of Applied Sciences Potsdam that the Coursera course cites as the source for their tutorial.
** The Data
- World Happiness Report Dataset [Internet]. [cited 2023 Dec 11]. Available from: https://www.kaggle.com/datasets/unsdsn/world-happiness
- Inc G. Gallup.com. 2009 [cited 2023 Dec 11]. Understanding How Gallup Uses the Cantril Scale. Available from: https://news.gallup.com/poll/122453/Understanding-Gallup-Uses-Cantril-Scale.aspx
- World Happiness Report [Internet]. 2023 [cited 2023 Dec 11]. Available from: https://worldhappiness.report/

** Altair
- Layered and Multi-View Charts — Vega-Altair 5.2.0 documentation [Internet]. [cited 2023 Dec 12]. Available from: https://altair-viz.github.io/user_guide/compound_charts.html
- Large Datasets — Vega-Altair 5.2.0 documentation [Internet]. [cited 2024 Mar 8]. Available from: https://altair-viz.github.io/user_guide/large_datasets.html

